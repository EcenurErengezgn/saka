#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace saka.busssiness
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="kpi")]
	public partial class SAKADataDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertKPI(KPI instance);
    partial void UpdateKPI(KPI instance);
    partial void DeleteKPI(KPI instance);
    partial void InsertKPI_CALCULATION_LOG(KPI_CALCULATION_LOG instance);
    partial void UpdateKPI_CALCULATION_LOG(KPI_CALCULATION_LOG instance);
    partial void DeleteKPI_CALCULATION_LOG(KPI_CALCULATION_LOG instance);
    partial void InsertKPI_VALUE(KPI_VALUE instance);
    partial void UpdateKPI_VALUE(KPI_VALUE instance);
    partial void DeleteKPI_VALUE(KPI_VALUE instance);
    #endregion
		
		public SAKADataDataContext() : 
				base(global::saka.busssiness.Properties.Settings.Default.kpiConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public SAKADataDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SAKADataDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SAKADataDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SAKADataDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<KPI> KPIs
		{
			get
			{
				return this.GetTable<KPI>();
			}
		}
		
		public System.Data.Linq.Table<KPI_CALCULATION_LOG> KPI_CALCULATION_LOGs
		{
			get
			{
				return this.GetTable<KPI_CALCULATION_LOG>();
			}
		}
		
		public System.Data.Linq.Table<KPI_VALUE> KPI_VALUEs
		{
			get
			{
				return this.GetTable<KPI_VALUE>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.KPI")]
	public partial class KPI : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _Name;
		
		private decimal _Target;
		
		private char _Period;
		
		private decimal _Threshold;
		
		private bool _Threshold_Type;
		
		private string _Unit;
		
		private System.DateTime _Creation_Date;
		
		private System.Nullable<System.DateTime> _Modification_Date;
		
		private bool _Direction;
		
		private EntitySet<KPI_CALCULATION_LOG> _KPI_CALCULATION_LOGs;
		
		private EntitySet<KPI_VALUE> _KPI_VALUEs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTargetChanging(decimal value);
    partial void OnTargetChanged();
    partial void OnPeriodChanging(char value);
    partial void OnPeriodChanged();
    partial void OnThresholdChanging(decimal value);
    partial void OnThresholdChanged();
    partial void OnThreshold_TypeChanging(bool value);
    partial void OnThreshold_TypeChanged();
    partial void OnUnitChanging(string value);
    partial void OnUnitChanged();
    partial void OnCreation_DateChanging(System.DateTime value);
    partial void OnCreation_DateChanged();
    partial void OnModification_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnModification_DateChanged();
    partial void OnDirectionChanging(bool value);
    partial void OnDirectionChanged();
    #endregion
		
		public KPI()
		{
			this._KPI_CALCULATION_LOGs = new EntitySet<KPI_CALCULATION_LOG>(new Action<KPI_CALCULATION_LOG>(this.attach_KPI_CALCULATION_LOGs), new Action<KPI_CALCULATION_LOG>(this.detach_KPI_CALCULATION_LOGs));
			this._KPI_VALUEs = new EntitySet<KPI_VALUE>(new Action<KPI_VALUE>(this.attach_KPI_VALUEs), new Action<KPI_VALUE>(this.detach_KPI_VALUEs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(400) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Target", DbType="Decimal(12,2) NOT NULL")]
		public decimal Target
		{
			get
			{
				return this._Target;
			}
			set
			{
				if ((this._Target != value))
				{
					this.OnTargetChanging(value);
					this.SendPropertyChanging();
					this._Target = value;
					this.SendPropertyChanged("Target");
					this.OnTargetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Period", DbType="Char(1) NOT NULL")]
		public char Period
		{
			get
			{
				return this._Period;
			}
			set
			{
				if ((this._Period != value))
				{
					this.OnPeriodChanging(value);
					this.SendPropertyChanging();
					this._Period = value;
					this.SendPropertyChanged("Period");
					this.OnPeriodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Threshold", DbType="Decimal(12,2) NOT NULL")]
		public decimal Threshold
		{
			get
			{
				return this._Threshold;
			}
			set
			{
				if ((this._Threshold != value))
				{
					this.OnThresholdChanging(value);
					this.SendPropertyChanging();
					this._Threshold = value;
					this.SendPropertyChanged("Threshold");
					this.OnThresholdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Threshold_Type", DbType="Bit NOT NULL")]
		public bool Threshold_Type
		{
			get
			{
				return this._Threshold_Type;
			}
			set
			{
				if ((this._Threshold_Type != value))
				{
					this.OnThreshold_TypeChanging(value);
					this.SendPropertyChanging();
					this._Threshold_Type = value;
					this.SendPropertyChanged("Threshold_Type");
					this.OnThreshold_TypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Unit", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string Unit
		{
			get
			{
				return this._Unit;
			}
			set
			{
				if ((this._Unit != value))
				{
					this.OnUnitChanging(value);
					this.SendPropertyChanging();
					this._Unit = value;
					this.SendPropertyChanged("Unit");
					this.OnUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Creation_Date", DbType="Date NOT NULL")]
		public System.DateTime Creation_Date
		{
			get
			{
				return this._Creation_Date;
			}
			set
			{
				if ((this._Creation_Date != value))
				{
					this.OnCreation_DateChanging(value);
					this.SendPropertyChanging();
					this._Creation_Date = value;
					this.SendPropertyChanged("Creation_Date");
					this.OnCreation_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Modification_Date", DbType="Date")]
		public System.Nullable<System.DateTime> Modification_Date
		{
			get
			{
				return this._Modification_Date;
			}
			set
			{
				if ((this._Modification_Date != value))
				{
					this.OnModification_DateChanging(value);
					this.SendPropertyChanging();
					this._Modification_Date = value;
					this.SendPropertyChanged("Modification_Date");
					this.OnModification_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Direction", DbType="Bit NOT NULL")]
		public bool Direction
		{
			get
			{
				return this._Direction;
			}
			set
			{
				if ((this._Direction != value))
				{
					this.OnDirectionChanging(value);
					this.SendPropertyChanging();
					this._Direction = value;
					this.SendPropertyChanged("Direction");
					this.OnDirectionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="KPI_KPI_CALCULATION_LOG", Storage="_KPI_CALCULATION_LOGs", ThisKey="Id", OtherKey="KPI_Id")]
		public EntitySet<KPI_CALCULATION_LOG> KPI_CALCULATION_LOGs
		{
			get
			{
				return this._KPI_CALCULATION_LOGs;
			}
			set
			{
				this._KPI_CALCULATION_LOGs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="KPI_KPI_VALUE", Storage="_KPI_VALUEs", ThisKey="Id", OtherKey="KPI_Id")]
		public EntitySet<KPI_VALUE> KPI_VALUEs
		{
			get
			{
				return this._KPI_VALUEs;
			}
			set
			{
				this._KPI_VALUEs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_KPI_CALCULATION_LOGs(KPI_CALCULATION_LOG entity)
		{
			this.SendPropertyChanging();
			entity.KPI = this;
		}
		
		private void detach_KPI_CALCULATION_LOGs(KPI_CALCULATION_LOG entity)
		{
			this.SendPropertyChanging();
			entity.KPI = null;
		}
		
		private void attach_KPI_VALUEs(KPI_VALUE entity)
		{
			this.SendPropertyChanging();
			entity.KPI = this;
		}
		
		private void detach_KPI_VALUEs(KPI_VALUE entity)
		{
			this.SendPropertyChanging();
			entity.KPI = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.KPI_CALCULATION_LOG")]
	public partial class KPI_CALCULATION_LOG : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.DateTime _Date;
		
		private bool _Success;
		
		private string _Exception_Message;
		
		private System.Guid _KPI_Id;
		
		private EntityRef<KPI> _KPI;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnSuccessChanging(bool value);
    partial void OnSuccessChanged();
    partial void OnException_MessageChanging(string value);
    partial void OnException_MessageChanged();
    partial void OnKPI_IdChanging(System.Guid value);
    partial void OnKPI_IdChanged();
    #endregion
		
		public KPI_CALCULATION_LOG()
		{
			this._KPI = default(EntityRef<KPI>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Success", DbType="Bit NOT NULL")]
		public bool Success
		{
			get
			{
				return this._Success;
			}
			set
			{
				if ((this._Success != value))
				{
					this.OnSuccessChanging(value);
					this.SendPropertyChanging();
					this._Success = value;
					this.SendPropertyChanged("Success");
					this.OnSuccessChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Exception_Message", DbType="VarChar(MAX)")]
		public string Exception_Message
		{
			get
			{
				return this._Exception_Message;
			}
			set
			{
				if ((this._Exception_Message != value))
				{
					this.OnException_MessageChanging(value);
					this.SendPropertyChanging();
					this._Exception_Message = value;
					this.SendPropertyChanged("Exception_Message");
					this.OnException_MessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KPI_Id", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid KPI_Id
		{
			get
			{
				return this._KPI_Id;
			}
			set
			{
				if ((this._KPI_Id != value))
				{
					if (this._KPI.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnKPI_IdChanging(value);
					this.SendPropertyChanging();
					this._KPI_Id = value;
					this.SendPropertyChanged("KPI_Id");
					this.OnKPI_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="KPI_KPI_CALCULATION_LOG", Storage="_KPI", ThisKey="KPI_Id", OtherKey="Id", IsForeignKey=true)]
		public KPI KPI
		{
			get
			{
				return this._KPI.Entity;
			}
			set
			{
				KPI previousValue = this._KPI.Entity;
				if (((previousValue != value) 
							|| (this._KPI.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._KPI.Entity = null;
						previousValue.KPI_CALCULATION_LOGs.Remove(this);
					}
					this._KPI.Entity = value;
					if ((value != null))
					{
						value.KPI_CALCULATION_LOGs.Add(this);
						this._KPI_Id = value.Id;
					}
					else
					{
						this._KPI_Id = default(System.Guid);
					}
					this.SendPropertyChanged("KPI");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.KPI_VALUE")]
	public partial class KPI_VALUE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _KPI_Id;
		
		private decimal _Value;
		
		private System.DateTime _Date;
		
		private decimal _Target;
		
		private decimal _Threshold;
		
		private bool _Threshold_Type;
		
		private EntityRef<KPI> _KPI;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnKPI_IdChanging(System.Guid value);
    partial void OnKPI_IdChanged();
    partial void OnValueChanging(decimal value);
    partial void OnValueChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnTargetChanging(decimal value);
    partial void OnTargetChanged();
    partial void OnThresholdChanging(decimal value);
    partial void OnThresholdChanged();
    partial void OnThreshold_TypeChanging(bool value);
    partial void OnThreshold_TypeChanged();
    #endregion
		
		public KPI_VALUE()
		{
			this._KPI = default(EntityRef<KPI>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KPI_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid KPI_Id
		{
			get
			{
				return this._KPI_Id;
			}
			set
			{
				if ((this._KPI_Id != value))
				{
					if (this._KPI.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnKPI_IdChanging(value);
					this.SendPropertyChanging();
					this._KPI_Id = value;
					this.SendPropertyChanged("KPI_Id");
					this.OnKPI_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Decimal(12,2) NOT NULL")]
		public decimal Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date NOT NULL", IsPrimaryKey=true)]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Target", DbType="Decimal(12,2) NOT NULL")]
		public decimal Target
		{
			get
			{
				return this._Target;
			}
			set
			{
				if ((this._Target != value))
				{
					this.OnTargetChanging(value);
					this.SendPropertyChanging();
					this._Target = value;
					this.SendPropertyChanged("Target");
					this.OnTargetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Threshold", DbType="Decimal(12,2) NOT NULL")]
		public decimal Threshold
		{
			get
			{
				return this._Threshold;
			}
			set
			{
				if ((this._Threshold != value))
				{
					this.OnThresholdChanging(value);
					this.SendPropertyChanging();
					this._Threshold = value;
					this.SendPropertyChanged("Threshold");
					this.OnThresholdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Threshold_Type", DbType="Bit NOT NULL")]
		public bool Threshold_Type
		{
			get
			{
				return this._Threshold_Type;
			}
			set
			{
				if ((this._Threshold_Type != value))
				{
					this.OnThreshold_TypeChanging(value);
					this.SendPropertyChanging();
					this._Threshold_Type = value;
					this.SendPropertyChanged("Threshold_Type");
					this.OnThreshold_TypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="KPI_KPI_VALUE", Storage="_KPI", ThisKey="KPI_Id", OtherKey="Id", IsForeignKey=true)]
		public KPI KPI
		{
			get
			{
				return this._KPI.Entity;
			}
			set
			{
				KPI previousValue = this._KPI.Entity;
				if (((previousValue != value) 
							|| (this._KPI.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._KPI.Entity = null;
						previousValue.KPI_VALUEs.Remove(this);
					}
					this._KPI.Entity = value;
					if ((value != null))
					{
						value.KPI_VALUEs.Add(this);
						this._KPI_Id = value.Id;
					}
					else
					{
						this._KPI_Id = default(System.Guid);
					}
					this.SendPropertyChanged("KPI");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
